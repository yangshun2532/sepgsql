--@SECURITY_CONTEXT=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c15
SET selinux_mcstrans TO off;
SELECT sepgsql_getcon();
                   sepgsql_getcon                    
-----------------------------------------------------
 unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c15
(1 row)

-- cleanup previous tests
SET client_min_messages TO 'error';
DROP TABLE IF EXISTS t1 CASCADE;
DROP TABLE IF EXISTS t2 CASCADE;
RESET client_min_messages;
-- CREATE TABLE for DML basic tests
CREATE TABLE t1
(
	a	int,
	b	text
) SECURITY CONTEXT 'system_u:object_r:sepgsql_ro_table_t:s0';
INSERT INTO t1 VALUES (1, 'aaa'), (2, 'bbb'), (3, 'ccc');
CREATE TABLE t2
(
	x	int,
	y	text
) SECURITY CONTEXT 'system_u:object_r:sepgsql_secret_table_t:s0';
INSERT INTO t2 VALUES (1, 'xxx'), (2, 'yyy'), (3, 'zzz');
--@SECURITY_CONTEXT=unconfined_u:unconfined_r:sepgsql_test_t:s0-s0:c0
SET selinux_mcstrans TO off;
SELECT sepgsql_getcon();
                  sepgsql_getcon                   
---------------------------------------------------
 unconfined_u:unconfined_r:sepgsql_test_t:s0-s0:c0
(1 row)

SET client_min_messages TO 'log';
UPDATE t1 SET b = b || '_updt';
LOG:  SELinux: denied { update } scontext=unconfined_u:unconfined_r:sepgsql_test_t:s0-s0:c0 tcontext=system_u:object_r:sepgsql_ro_table_t:s0 tclass=db_table name=t1
ERROR:  SELinux: security policy violation
SELECT * FROM t2;
LOG:  SELinux: denied { select } scontext=unconfined_u:unconfined_r:sepgsql_test_t:s0-s0:c0 tcontext=system_u:object_r:sepgsql_secret_table_t:s0 tclass=db_table name=t2
ERROR:  SELinux: security policy violation
--@SECURITY_CONTEXT=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c15
SET selinux_mcstrans TO off;
SELECT sepgsql_getcon();
                   sepgsql_getcon                    
-----------------------------------------------------
 unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c15
(1 row)

-- cleanups
SET client_min_messages TO 'error';
DROP TABLE IF EXISTS t1 CASCADE;
DROP TABLE IF EXISTS t2 CASCADE;
RESET client_min_messages;
