
The ACE framework developer documentation
------------------------------------------

 Overview
==========

The purpose of ACE (Access Control Extension) framework is to allow PostgreSQL
to host multiple security providers, not only the default PG privileges.
The security provider makes its access control decision on user's accesses to
various kind of database objects based on its basis. For example, the default
PG checks is one of the security providers on the ACE framework, and it makes
its access control decision based on the database role and ownership/acls of
the database objects to be accessed.

  NOTE: Currently, the ACE framework does not provide a capability to host
  multiple security providers, more than the default PG privileges because it
  is under development now.

When we design access control mechanism, generally, it needs to deploy a set
of security hooks on certain code paths to be controled (called strategic
points). Then, the access control routines shall be invoked via the security
hooks and makes its access control decision.
In the ACE framework, the core routines call an abstracted security hook to
apply access controls, rather than routines about a certain access control
mechanism. The abstracted security hook also calls the default PG privileges
and can call any other enhanced security routines.

For example, the ACE patch replaced invocations of pg_namespace_aclcheck()
with ACL_USAGE by check_schema_search(). The check_schema_search() performs
same checks within the function, but it can also perform as an entrypoint
for the upcoming enhanced securities which want to apply permission checks
to search a certain schema object.


 Internal design
=================

All the ace hooks are stored in: src/backend/security/ace/*.c

Every files have the "ace_<object class>.c" naming convension, and it stores
all the security hooks corresponding to the object class. The ace_misc.c is
an exception. It stores uncategorized hooks such as initialization of the
security providers.

All the ACE hooks have the following naming convension:

  check_<object class>_<action to be checked>(...);

  e.g) check_relation_create()
    It means a security hook to check privilege to create a new relation
    with the given parameters.

Every ACE hooks deliver enough information to make access control decision
from the caller to the security providers. For example, when user tries to
move a table from a schema to another schema, check_relation_alter_schema()
shall be called with OID of the table to be moved and the new schema to
check this permission. So, the default PG privileges can check ownership of
the table and CREATE permission on the new schema. If violated, it can raise
an error to abort the current transaction.

Some of security hooks may return 'false' or any other error status to tell
the caller that the security providers didn't allow required user's action.
In this case, the caller shall handle the error status correctly.

Specifications of ACE hooks functions are described in the head of every
hooks, so see the ace/ace_xxxx.c files to know what information shall be
delivered to and how does the security provider perform.

  NOTE: Currently, the way to host enhanced securities are not fixed.
    So, we don't describe it here, but should be introduced here in the
    future version.


 Future works
==============

The current ACE framework is under development, so we need more works.


* It needs to add hooks on comprehensive database object classes

Currently, the ACE hooks replaced only a part of the default PG privileges.
The core routines corresponding to the objects except for a part of object
classes have inlined pg_xxx_aclcheck() and pg_xxx_ownercheck() invocations.
Before we add support the second security provider, the ACE framework should
support comprehensive database object classes.

* It needs to allow to host multiple enhanced security muchanisms, not only
  the default PG privileges.

Currently, the ACE framework hosts only the default PG checks. We need to decide
the way to call any other enhanced securities, and implement it.

* It needs to add features to manage security label of database objects.

A few upcoming enhanced securities needs a facility to assign a security label
(also called as security context) on database objects to be controled.

It also needs statement support to specify a security label of database object,
and backup/restore support in pg_dump, and so on.

* It needs to be integrated with the upcoming row-level security feature.

A general purpose row-level security feature is now planned. The ACE framework
also needs to be integrated with this facilitiy.

