Apache/SELinux plus documentation
=================================

OVERVIEW
--------
The Apache/SELinux plus is a set of modules which give us
a feature to perform web applications with individual security
context based on http-authentication.

List of modules:
 * mod_selinux.so
 * mod_authn_sepgsql.so (under development)
 * mod_selinux.pp (targeted and mls)

The mod_selinux.so is a third-party module for apache/httpd.
It enables to launch web-application instances with individual
security context based on the result of http-authentications.
Internally, it creates a one-time worker thread for each
connections from client, as if traditional client-server model
did, and assigns its security context on the worker prior to
the invocation of web-applications.

In the past days, we had a headache issue that all the requests
to the web-server handled under a uniformed set of privileges
with few exceptions such as CGI.
From the viewpoint of operating system, it meant we cannot
discriminate all the web-application instances and cannot
apply valid access controls.

For example, the apache/httpd is typically working under httpd_t
domain, and it accepts and handles all the http requests, but
all the instance shares or inherits httpd_t.

(NOTE: mod_authn_sepgsql.so is now under development.)
The mod_authn_sepgsql.so provides an authentication mechanism
using SE-PostgreSQL backend. In addition, this module allows
us to set a certain domain to be performed for the given http
users. We can use it with vanilla PostgreSQL backend, but our
recommendation is using SE- version to keep confidentiality
of identification/authentication info.

REQUIREMENTS
------------

It needs the following packages:

 - httpd and httpd-devel (>= 2.2.0)
 - libselinux and libselinux-devel
 - selinux-policy
 - checkpolicy (>= 2.0.19)
 - policycoreutils

BUILD and INSTALLATION
----------------------

* RPM Installation (preferable)

 # rpm -Uvh mod_selinux-2.2.xxxx-x.xxx.<arch>.rpm

 It installs the modules and configurations on the standard path,
 and it also installs its security policy module.

* Build from the tarball

 % tar zxvf mod_selinux-2.2.xxxx.tgz
 % cd mod_selinux-2.2.xxxx
 % make
 % make -f /usr/share/selinux/devel/Makefile
 % su
 # make install
 # semodule -i mod_selinux.pp


CONFIGURATION (mod_selinux.so)
------------------------------

The mod_selinux.so has the following four configurations:

 * selinuxServerDomain  <domain/range pair>
  It specifies the security context of daemon process which accepts
  the connection come from clients. The mod_selinux.pp security policy
  module adds a range_transition rule to perform with mcs_systemhigh
  categories at first. However, in most cases, all the categories are
  not required for httpd daemon process.
  This directive allows us to drop unnecessary categories prior to
  connection accepting. If you only uses category from c0 to c15,
  we recommend you to set up the directive as follows.

   Example)
    selinuxServerDomain    *:s0-s0:c0.c15

 * selinuxDomainMap     <filename>
  It specifies the user/domain mapping file which defines the
  relationship between username (authenticated by httpd) and
  a domain/range pair.

   Example)
    selinuxDomainMap    /var/www/mod_selinux.map

 * selinuxDomainEnv <environment variable>
  It specifies an environment variable which tells a domain/range
  pair to be assigned. We can set up an environment variable using
  SetEnfIf directive conditionally, and some of authentication module
  have a plan to set up it to show expected domain/range pair.

   Example)
    SetEnvIf Remote_Addr "192.168.1.[0-9]+$" SELINUX_DOMAIN=staff_webapp_t:s0:c1
    SetEnvIf Remote_Addr "192.168.2.[0-9]+$" SELINUX_DOMAIN=staff_webapp_t:s0:c2
    selinuxDomainEnv    SELINUX_DOMAIN

 * selinuxDomainVal    <domain/range pair>
  It specifies a domain/range pair to be assigned to content handlers.
  In normal cases, this directive is placed on the tail of the series
  of configuration to perform as a fallback when the request does not
  match selinuxDomainMap/selinuxDomainEnv rules.

   Example)
    SetEnvIf Remote_Addr "192.168.1.[0-9]+$" SELINUX_DOMAIN=staff_webapp_t:s0:c1
    SetEnvIf Remote_Addr "192.168.2.[0-9]+$" SELINUX_DOMAIN=staff_webapp_t:s0:c2
    selinuxDomainMap    /var/www/mod_selinux.map   ... (1)
    selinuxDomainEnv    SELINUX_DOMAIN             ... (2)
    selinuxDomainVal    anon_webapp_t:s0           ... (3)

  In this example, the (1) is checked at first. If the given request is
  already authenticated and matched to the mapfile, the mod_selinux.so
  launches the contents handler with an appropriate domain/range pair.
  Then, (2) is checked. The SELINUX_DOMAIN is set based on Remote_Addr,
  so it may have a valid value, if the request come from certain networks.
  Otherwise, the (3) will be checked and any other request is executed
  with the domain/range pair of "anon_webapp_t:so".

 * selinuxAllowCaches (On|Off)
  As the apache/httpd official documentation noted, it checks
  contents caches prior to authentications and domain transition,
  so it may allow users to bypass access controls.
  The mod_selinux.so disables contents caches as far as the
  configuration is not explicitly set.
  Please understand the risk to use contents caches, before you
  enables it.

   Example)
    selinuxAllowCaches        On

CONFIGURATION (mapping files)
-----------------------------

The selinuxDomainMap can specify a certain mapping file which allows
to describe relationships between a http-authenticated username and
a pair of domain/range.
Each lines of the mapfile mean a relationship as follows:

  kaigai	staff_webapp_t:s0

The lefthand is a username, and the righthand is a domain/range pair.
We have two special usernames. The "*" matches all the usernames and
anonymous (unauthenticated) requests, and "__anonymous__" matches
all the anonymous requests but does not for authenticated users.

When both or either of domain/range part is "*", it means mod_selinux
does not change the current ones. For example, when "*:s0:c0" is given
for a user; himainu, his request will be run with "s0:c0" in MCS, but
it inherits server processes domain.

The '#' and the following characters are handled as comments.

 Example)
  #
  # user <--> domain/range mapping
  #
  kaigai		*:s0:c0
  himainu		*::s0:c1
  panda			staff_webapp_t:s0:c2
  __anonymous__		anon_webapp_t:s0


TIPS (virtual-host based separation)
------------------------------------

If you want to separate the security context per virtual host,
but not necessary for users, we can utilize selinuxDomainVal
to set up the domain/range pair for each virtual host.
In the following example, all the request for dog.example.com
will be handled with "s0:c1" category, but ones for others are
handled with "s0:c2" category.

 Example)
  NameVirtualHost *:80
  
  <VirtualHost *:80>
  DocumentRoot          /var/www/html
  ServerName            dog.example.com
  selinuxDomainVal       *:s0:c1
  </VirtualHost>

  <VirtualHost *:80>
  DocumentRoot          /var/www/html
  ServerName            cat.example.com
  selinuxDomainVal      *:s0:c2
  </VirtualHost>

CONTACT
-------

Author: KaiGai Kohei <kaigai@ak.jp.nec.com>


COPYRIGHT and LICENSE
---------------------
Copyright (c) 2009 NEC Corporation

This is free software, available under the terms of the Apache Software
License 2.0. See the file LICENSE for details.
