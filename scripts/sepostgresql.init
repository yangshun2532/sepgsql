#!/bin/sh
# sepostgresql	This is the init script for starting up SE-PostgreSQL
#
# chkconfig: - 64 36
# description: Starts and stops the SE-PostgreSQL backend daemon
# processname: postmaster
# pidfile: /var/run/postmaster.pid
#---------------------------------------------------------------------

PGVERSION="%%__base_postgresql_version__%%"
PGMAJORVERSION=`echo "$PGVERSION" | sed 's/^\([0-9]*\.[0-9]*\).*$/\1/'`
SEPGVERSION="%%__default_sepgversion__%%.%%__default_sepgversion_minor__%%"

# source function library
. /etc/rc.d/init.d/functions

# get config
. /etc/sysconfig/network

# find the name of the script
NAME=`basename $0`
if [ ${NAME:0:1} = "S" -o ${NAME:0:1} = "K" ]; then
    NAME=${NAME:3}
fi

# set defaults for configurable variables
SEPGSQL_BIN="/opt/sepgsql/bin"
SEPGSQL_DATA="/var/lib/sepgsql/data"
SEPGSQL_PORT=5432
SEPGSQL_OPTS="-i"
SEPGSQL_STARTUP_LOG="/var/lib/sepgsql/pgstartup.log"
SEPGSQL_LOG="/var/log/sepostgresql.log"
SEPGSQL_FALLBACK_CONTEXT="user_u:user_r:user_t"

# override defaults from /etc/sysconfig/sepostgresql
test -f /etc/sysconfig/${NAME} && . /etc/sysconfig/${NAME}

export SEPGSQL_FALLBACK_CONTEXT
export PGPORT=${SEPGSQL_PORT}
export PGDATA=${SEPGSQL_DATA}

# Check that networking is up.
test "${NETWORKING}" = "no" && exit 0
test -f "${SEPGSQL_BIN}/postmaster" || exit 1

script_result=1

do_start() {
    PSQL_START=$"Starting ${NAME} service: "
    echo -n "$PSQL_START"

    # make sure startup-time log file is valid
    if [ ! -e "${SEPGSQL_STARTUP_LOG}" -a ! -h "${SEPGSQL_STARTUP_LOG}" ]; then
	touch "${SEPGSQL_STARTUP_LOG}" || exit 1
	chown sepgsql:sepgsql "${SEPGSQL_STARTUP_LOG}"
	chmod 600 "${SEPGSQL_STARTUP_LOG}"
	restorecon "${SEPGSQL_STARTUP_LOG}"
    fi
    
    # check for the SEPGSQL_DATA structure
    if [ -f "${SEPGSQL_DATA}/PG_VERSION" ] && [ -d "${SEPGSQL_DATA}/base" ]; then
	if [ x`cat "${SEPGSQL_DATA}/PG_VERSION"` != x"${PGMAJORVERSION}" ]; then
	    failure "$PSQL_START"
	    echo
	    echo "HINT: An old version of the database format was found."
	    echo "HINT: You need to upgrade the data format before using SE-PostgreSQL."
	    exit 1
	fi
    else
	failure "$PSQL_START"
	echo
	echo "HINT: ${SEPGSQL_DATA} is missing."
	echo "HINT: Use '/etc/init.d/${NAME} initdb'"
	echo "HINT:   to initialize the database cluster first."
	script_result=1
	exit 1
    fi

    # make sure SEPGSQL_LOG
    touch ${SEPGSQL_LOG}
    chown sepgsql:sepgsql ${SEPGSQL_LOG}
    chmod 600 ${SEPGSQL_LOG}
    test -x /sbin/restorecon && /sbin/restorecon ${SEPGSQL_LOG}

    # to correct debugging info
    ulimit -c unlimited
    cd ~sepgsql

    runuser sepgsql -- -c "${SEPGSQL_BIN}/pg_ctl start -l ${SEPGSQL_LOG} -o '${SEPGSQL_OPTS}'" >> ${SEPGSQL_STARTUP_LOG} 2>&1 < /dev/null
    sleep 1
    if runuser sepgsql -- -c "${SEPGSQL_BIN}/pg_ctl status" >& /dev/null; then
	success "$PSQL_START"
    else
	failure "$PSQL_START"
	script_result=1
    fi
    echo
}

do_stop() {
    echo -n $"Stopping ${NAME} service: "
    runuser sepgsql -- -c "${SEPGSQL_BIN}/pg_ctl stop" >> ${SEPGSQL_STARTUP_LOG} 2>&1 < /dev/null
    script_result=$?
    if [ $script_result -eq 0 ]; then
	echo_success
    else
	echo_failure
	script_result=1
    fi
    echo
}

do_status() {
    (
	runuser sepgsql -- -c "${SEPGSQL_BIN}/pg_ctl status" 2>&1 
	script_result=$?
    ) | head -1 | sed "s/^pg_ctl:/${NAME}:/g"
}

do_condrestart() {
    runuser sepgsql -- -c "${SEPGSQL_BIN}/pg_ctl status" >& /dev/null && do_stop && do_start
}

do_condstop() {
    runuser sepgsql -- -c "${SEPGSQL_BIN}/pg_ctl status" >& /dev/null && do_stop
}

do_reload() {
    echo -n $"Reloading ${NAME} service: "
    runuser sepgsql -- -c "${SEPGSQL_BIN}/pg_ctl reload" >> ${SEPGSQL_STARTUP_LOG} 2>&1 < /dev/null
    script_result=$?
    if [ $script_result -eq 0 ]; then
	echo_success
    else
	echo_failure
	script_result=1
    fi
    echo
}

do_initdb() {
    echo -n $"Initializing database: "

    if [ -f "${SEPGSQL_DATA}/PG_VERSION" ]; then
	echo_failure
	echo
	echo "HINT: Data directory is not empty"
	script_result=1
    else
	if [ ! -e "${SEPGSQL_DATA}" -a ! -h "${SEPGSQL_DATA}" ]; then
	    mkdir -p "${SEPGSQL_DATA}" || exit 1
	    chown sepgsql:sepgsql "${SEPGSQL_DATA}"
	    chmod 600 "${SEPGSQL_DATA}"
	fi
	# cleanup SELinux labeling for "${SEPGSQL_DATA}"
	test -x /sbin/restorecon && /sbin/restorecon -R "${SEPGSQL_DATA}"
	# Initialize the database
	runuser -- sepgsql -c "${SEPGSQL_BIN}/initdb -A 'ident sameuser'" \
	    >> "${SEPGSQL_STARTUP_LOG}" 2>&1 < /dev/null
	if [ -f "${SEPGSQL_DATA}/PG_VERSION" ]; then
	    echo_success
	else
	    echo_failure
	    script_result=1
	fi
	echo
    fi
}

# see how we were called.
case "$1" in
    start)
        do_start
	;;
    stop)
        do_stop
	;;
    status)
        do_status
	;;
    restart)
	do_stop
	do_start
	;;
    condrestart)
        do_condrestart
	;;
    condstop)
        do_condstop
	;;
    reload|force-reload)
        do_reload
	;;
    initdb)
        do_initdb
	;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|condstop|reload|force-reload|initdb}"
        exit 1
    ;;
esac

exit ${script_result}
