日本語版ドキュメント

= はじめに =

SE-PostgreSQLとは、


日本語版ドキュメント




= インストールと設定 =


= セキュリティデザイン =

== 概要 ==

== オブジェクトクラスとアクセスベクタ ==
SE-PostgreSQLのセキュリティデザインを記述するために、以下の表に示す6つのオブジェクトクラスと、合計55種類のアクセスベクタが追加されました。残念ながら2007年２月現在、これらのオブジェクトクラス・アクセスベクタはまだSELinuxコミュニティによってメンテナンスされている標準のセキュリティポリシーには取り込まれていません。

|| *database* || *table* || *procedure* || *column* || *blob* || *tuple* ||
|| create || create || create || create || create || relabelfrom ||
|| drop || drop || drop || drop || drop || relabelto ||
|| getattr || getattr || getattr || getattr || getattr || select ||
|| setattr || setattr || setattr || setattr || setattr || update ||
|| relabelfrom || relabelfrom || relabelfrom || relabelfrom || relabelfrom || insert ||
|| relabelto || relabelto || relabelto || relabelto || relabelto || delete ||
|| access || select || execute || select || read || ||
|| install_module || update || entrypoint || update || write || ||
|| load_module || insert || || insert || import || ||
|| get_param || delete || || || export || ||
|| set_param || lock || || || || ||

=== databaseクラス ===
*database* クラスはデータベース自身と、固有のオブジェクトクラスを持たないデータベースオブジェクトに対する権限セットを定義します。固有のオブジェクトクラスを持たないデータベースオブジェクトとは、例えばデータベースユーザやトリガのことです。

*暗黙的ラベリング*
 CREATE DATABASE 構文を用いて新たにデータベースを作成するとき、クライアントプロセス及びSE-PostgreSQLサーバプロセスのセキュリティコンテキストに基づいて、データベースのセキュリティコンテキストが暗黙のうちに決定されます。
 
 CREATE _<hoge>_ 構文を用いて新たに固有のオブジェクトクラスを持たないデータベースオブジェクトを作成するとき、クライアントプロセス及びデータベースのセキュリティコンテキストに基づいて、データベースオブジェクトのセキュリティコンテキストが暗黙のうちに決定されます。

*create*

*drop*

*getattr*

*setattr*

*relabelfrom*

*relabelto*

*access*

*install_module*

*load_module*

*get_param*

*set_param*

=== tableクラス ===
*table* クラスはテーブルに対する権限セットを定義します。

=== procedureクラス ===
*procedure* クラスは関数 (stored procedure) に対する権限セットを定義します。

=== columnクラス ===
*column* クラスはカラムに対する権限セットを定義します。なお、ネイティブのPostgreSQLにはカラムに対するアクセス制御は存在しません。


=== blobクラス ===
*blob* クラスは Binary Large Object (BLOB) に対する権限セットを定義します。なお、ネイティブのPostgreSQLにはBLOBに対するアクセス制御機能は存在しません。


=== tupleクラス ===
*tuple* クラスはタプルに対する権限セットを定義します。なお、ネイティブのPostgreSQLにはタプルに対するアクセス制御は存在しません。







= SE-PostgreSQLの利用 =
= 内部情報 =

= 付録 =

== 拡張SQL構文・関数 ==

SE-PostgreSQLのセキュリティ機能を活用するために、SE-PostgreSQLでは幾つかのSQL構文が拡張され、SQL関数が新しく追加されています。本章では、これらの拡張機能について解説します。

=== ALTER DATABSE 構文 ===
*書式*

 ALTER DATABASE _dbname_ CONTEXT = _'context'_

*説明*
 PostgreSQL の ALTER DATABASE 構文の拡張によって、データベースのセキュリティコンテキストを変更することが可能になりました。

 この構文を実行すると、_dbname_ で指定されたデータベースのセキュリティコンテキストを _'context'_ に変更します。
 クライアントはデータベースに対して *database:{setattr relabelfrom}* 権限を、そして新しく付与するセキュリティコンテキストに対して *database:{relabelto}* 権限を有していなければいけません。

*例*
{{{
kaigai=# alter DATABASE testdb context = 'user_u:object_r:sepgsql_db_t:s0:c0';
ALTER DATABASE
kaigai=#
}}}

*注釈*
 この構文を実行した結果、データベースのセキュリティコンテキストが変化しない場合、*database:{relabelfrom relabelto}* 権限は評価されません。

=== ALTER TABLE 構文 ===
*書式*

 ALTER TABLE _tblname_ CONTEXT = _'context'_
 
 ALTER TABLE _tblname_ ALTER _colname_ CONTEXT = _'context'_

*説明*
 PostgreSQLの ALTER TABLE 構文の拡張によって、テーブル又はカラムのセキュリティコンテキストを変更することが可能になりました。

 最初の構文を実行すると、_tblname_ で指定されたテーブルのセキュリティコンテキストを、_'context'_ に変更します。
 クライアントはテーブルに対して *table:{setattr relabelfrom}* 権限を、そして新しく付与するセキュリティコンテキストに対して *table:{relabelto}* 権限を有していなければいけません。
 
 後ろの構文を実行すると、_tblname_ . _colname_ で指定されたカラムのセキュリティコンテキストを、 _'context'_ に変更します。クライアントはカラムに対して *column:{setattr relabelfrom}* 権限を、そして新しく付与するセキュリティコンテキストに対して *column:{relabelto}* 権限を有していなければいけません。

*例*
{{{
kaigai=# ALTER TABLE drink CONTEXT = 'user_u:object_r:sepgsql_secret_table_t';
ALTER TABLE
kaigai=#
}}}

*注釈*
 この構文を実行した結果、テーブルのセキュリティコンテキストに変化がない場合、*table:{relabelfrom relabelto}* 権限は評価されません。同様にカラムのセキュリティコンテキストに変化がない場合、*column:{relabelto}* 権限は評価されません。

=== ALTER FUNCTION 構文 ===
*書式*

 ALTER FUNCTION _funcname_ CONTEXT = _'context'_

*説明*
 PostgreSQL の ALTER FUNCTION 構文の拡張によって、関数のセキュリティコンテキストを変更することが可能になりました。

 この構文を実行すると、_funcname_ で指定された関数のセキュリティコンテキストを _'context'_ に変更します。
 クライアントはデータベースに対して *procedure:{setattr relabelfrom}* 権限を、そして新しく付与するセキュリティコンテキストに対して *procedure:{relabelto}* 権限を有していなければいけません。

*例*
{{{
kaigai=# alter function check_person_passwd(integer, text)
      context = 'user_u:object_r:sepgsql_trusted_proc_t';
ALTER FUNCTION
kaigai=#
}}}

*注釈*
 この構文を実行した結果、関数のセキュリティコンテキストが変化しない場合、*procedure:{relabelfrom relabelto}* 権限は評価されません。

=== sepgsel_getcon() 関数 ===
*定義*

 sepgsql_getcon() returns *psid*

*説明*
 この関数はクライアントのセキュリティコンテキストを取得するために新たに追加されました。
 
 sepgsql_getcon() 関数を実行すると、現在のセキュリティコンテキストを返します。Trusted Procedureの内部から呼び出された場合には、ドメイン遷移を行った先のセキュリティコンテキストを行います。

*例*
{{{
kaigai=# select sepgsql_getcon();
                 sepgsql_getcon
-------------------------------------------------
 root:system_r:unconfined_t:SystemLow-SystemHigh
(1 row)
}}}

=== lo_get_security() 関数 ===
*定義*

 lo_get_security( *Oid* _loid_ ) returns *psid*

*説明*
 この関数はラージオブジェクトのセキュリティコンテキストを取得するために新たに追加されました。
 
 lo_get_security()関数を実行すると、 _loid_ で指定したラージオブジェクトのセキュリティコンテキストを返却します。クライアントは、ラージオブジェクトに対して *blob:{getattr}* 権限を有していなければいけません。

*例*
{{{
kaigai=# select lo_get_security(16410);
        lo_get_security
--------------------------------
 user_u:object_r:sepgsql_blob_t
(1 row)
}}}

=== lo_set_security() 関数 ===
*定義*

 lo_set_security( *Oid* _loid_, *psid* _context_ ) returns *bool*

*説明*
 この関数はラージオブジェクトのセキュリティコンテキストを変更するために新たに追加されました。
 
 lo_set_security()関数を実行すると、 _loid_ で指定したラージオブジェクトのセキュリティコンテキストを_context_に変更します。クライアントは、ラージオブジェクトに対して *blob:{setattr relabelfrom}* 権限を、そして新しく付与するセキュリティコンテキストに対して *blob:{relabelto}* 権限を有していなければいけません。

*例*
{{{
kaigai=# select lo_set_security(16410, 'user_u:object_r:sepgsql_secret_blob_t');
 lo_set_security
-----------------
 t
(1 row)
}}}


== SELinuxについて ==

=== Security Context ===
=== Type Enforcement (TE)===
=== Domain Transition ===
=== Multi Level Security (MLS) ===
=== Role Based Access Control (RBAC) ===
=== Labeled Networking ===


