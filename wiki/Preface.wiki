#labels Phase-Design
= Preface =

The series of pages are the official documentation of Security Enhanced PostgreSQL (SE-PostgreSQL). It describes the processes of install/setting up, the way to utilize secure functionalities, the information being needed by developers and related
technologies.
== What is SE-PostgreSQL ==
Security Enhanced PostgreSQL (SE-PostgreSQL) is an extension of PostgreSQL relational database management system, based on Security Enhanced Linux (SELinux)'s security model and policy.
It can provide fine grained mandatory access control to various database objects such as tables, columns or tuples and can apply consistent authority of remote/local client integrated with operation system independent from database authorization.
These facilities enable to build a database management system into information flow control scheme integrated with operating system. It helps to protect your information asset from some of threats like leaking, defacing and destruction.

 This project is supported by [http://www.ipa.go.jp/english/humandev/third.html Exploratory Software Project (2006FY)] of IPA (Information-technology Promotion Agency, Japan).

== License ==

The origion of SE-PostgreSQL is PostgreSQL, no need to say. We also apply SE-PostgreSQL the same license of PostgreSQL.
PostgreSQL is currently distributed with BSD license, and it can be applied on SE-PostgreSQL.see, [http://www.postgresql.org/about/licence]

== Table of contents ==
 # Preface
 # Installation and Configuration
 # Using SE-PostgreSQL
 # Internal Infomation
 # Appendix

== Features of SE-PostgreSQL ==


=== Fine grained access control ===
SE-PostgreSQL enables fine-grained access control onto various database objects such as databases itself, tables, columns, tuples, stored procedures or binary large objects (blob). Especially, native PostgreSQL access control list does not provide any access control on columns, tuples and blob.
These are the tiniest unit of database objects. This facility provide the maximum flexibility for your purpose.

=== Mandatory access control ===
In native PostgreSQL, privileged users (typically, it's the owner of the database) can bypass any access control, and the object owner can config its access control list discretionally by using GRANT/REVOKE statement.
SE-PostgreSQL provides none-bypassable access control for all database users, all SQL queries, based on SELinux security policy.

==== Traditional mandatory access control ====
Traditional-MAC means multi level/category security model. Because recent version of SELinux support multi level/category security, we can say SE-PostgreSQL also support them.

=== Implicit labeling ===
In SE-PostgreSQL, various kinds of database objects are labeled either explicitly or implicitly according to default labeling rules in the security policy.


We can label 

A user cannot assign security context not to be allowed by the security policy, even if explicit labeling was tried to do.







=== Client authority integrated with operating system ===


=== Consistency in access control ===
=== Information flow control ===













