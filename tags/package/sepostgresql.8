.TH "sepostgresql" "8" "Jul 11 2009" "kaigai@ak.jp.nec.com" "Security-Enhanced PostgreSQL"

.SH "NAME"
sepostgresql \- Security-Enhances PostgreSQL

.SH "DESCRIPTION"
Security-Enhanced PostgreSQL (SE-PostgreSQL) is an enhancement of PostgreSQL,
to apply fine grained mandatory access control for database objects based on
the security policy of SELinux. 
These features enable to apply flexible integrated access control policy
on both of operating system and database management system, during all
stages of the life of the information.
.PP
This document describes the way to customize SE-PostgreSQL on the default
security policy.
.PP
The online SE-PostgreSQL documentation shall give you more detailed and
comprehensive information.
.PP
See also \fIhttp://wiki.postgresql.org/wiki/SEPostgreSQL\fP .

.SH "BOOLEANS"
The SELinux policy is customizable via BOOLEAN variable. This variable has
two states, 1 (on) or 0 (off). We can validate or invalidate a part of the
security policy depending on the state of boolean variables.

\fBsepgsql_enable_users_ddl\fP enables to toggle permissions of confined
users/applications to invoke DDL statement, like CREATE TABLE. It is set to
\fBon\fP in the default.
In most cases, DDL statements are used to set up initial database structure,
and permissions to invoke them are not necessary on operation phase.
You can turn off this boolean as follows:

.EX
setsebool -P sepgsql_enable_users_ddl ( \fBon\fP | off )
.EE

Rest of booleans are provided by \fBselinux-devel.pp\fP policy module.
It provides developments/debugs related permissions.
You can install it as follows:

.EX
semodule -i /usr/share/selinux/targeted/sepostgresql-devel.pp
.EE

\fBsepgsql_enable_auditallow\fP toggles output of audit messages in the case
when required permission checks are allowed, except for tuples because it
easily make a flood of audit logs.
In the default, it is set to off. You can set it as follows:

.EX
setsebool -P sepgsql_enable_auditallow ( on | \fBoff\fP )
.EE

\fBsepgsql_enable_auditdeny\fP toggles output of audit messages in the case
when required permission checks are denied, except for tuples because it
easily make a flood of audit logs.
In the default, it is set to on. You can set it as follows:

.EX
setsebool -P sepgsql_enable_auditdeny ( \fBon\fP | off )
.EE

\fBsepgsql_regression_test_mode\fP allows to load shared libraries deployed
on user's home directory. We recommend you to keep \fBoff\fP in operation
phase to prevent to load malicious libraries.
However, typical PostgreSQL regression test requires to load it, so we
have to reduce several restriction during the test.
In the default, it is set to off. You can set it as follows:

.EX
setsebool -P sepgsql_regression_test_mode ( on | \fBoff\fP )
.EE

.SH "PREDEFINED TYPES"

\fBsepgsql_db_t\fP is the only type assigned to any databases.
It is also the default type of databases for any clients.

\fBsepgsql_table_t\fP is a type for tables, columns and tuples.
It is the default type of tables created by unconfined clients.
It allows confined clients various kind of operations expect for
relabeling, so we can use the type for compatible purpose.

\fBsepgsql_fixed_table_t\fP is a type for tables, columns and tuples.
It allows confined clients to \fBSELECT\fP and \fBINSERT\fP, but
\fBUPDATE\fP and \fBDELETE\fP are disallowed.
It can be used to store information asset to be protected from unexpected
manipulations.

\fBsepgsql_ro_table_t\fP is a type for tables, columns and tuples.
It only allows confined clients to \fBSELECT\fP, but any other writer
operations shall be prevented.
It can be used to store read-only informations.

\fBsepgsql_secret_table_t\fP is a type for tables, columns and tuples.
It does not allow confined clients anything, so it can be used to store
confidential information asset.
The only way to access this type is to invoke trusted procedures.

\fBPREFIX_sepgsql_table_t\fP is a type for tables, columns and tuples.
It is the default type of tables created by confined clients.
It allows confined clients various kind of operations expect for
relabeling, but it is restricted to same PREFIX.
The \fIunpriv\fP is applied to confined clients without a certain role.

\fBsepgsql_proc_exec_t\fP is a type for procedures.
It is the default type of procedured created by unconfined clients.
It allows confined clients to execute the procedures, and all the
built-in functions shall be labeled with the type.

\fBsepgsql_trusted_proc_exec_t\fP is a type for trusted procedures.
It allows confined clients to execute the procedures, and their
clients shall be switched to \fBsepgsql_trusted_proc_t\fP during
the execution of the procedure.
Unconfined accesses are allowed to \fBsepgsql_trusted_proc_t\fP,
so it can be used to provide confined clients secure methods to
access confidential informations.

\fBPREFIX_sepgsql_proc_exec_t\fP is a type for procedures.
It is the default type of procedures created by confined clients.
It allows confined clients various kind of operations expect for
relabeling, but it is restricted to same PREFIX.
Unconfined clients cannot execute the procedures with this type,
because user defined functions are not enough trusted and it is
not safe to execute with unconfined privileges.
In this case, 

\fBsepgsql_blob_t\fP is a type for largeobjects.
It is the default type of largeobjects created by unconfined clients.
It allows confined clients various kind of operations expect for
relabeling.

\fBsepgsql_ro_blob_t\fP is a type for largeobjects.
It allows confined clients to read the largeobjects, but writer
operations are not allowed.

\fBsepgsql_secret_blob_t\fP is a type for largeobjects.
It does not allow confined clients anything, so it can be used to store
confidential information asset.

\fBPREFIX_sepgsql_blob_t\fP is a type for largeobjects.
It is the default type of largeobjects created by confined clients.
It allows confined clients various kind of operations expect for
relabeling, but it is restricted to same PREFIX.

.SH "BACKUP and RESTORE"
\fI--security-label\fP option in \fBsepg_dump\fP and \fBsepg_dumpall\fP enable to dump database image with security context. We can restore the dumped image using the standard \fIpg_restore\fP and so on.

.EX
Example)
$ sepg_dump -Ft -b --security-label postgres | gzip -c > postgres.tgz
.EE

.SH AUTHOR	
This manual page was written by KaiGai Kohei <kaigai@kaigai.gr.jp>

.SH "SEE ALSO"

selinux(8), boolean(8)
